{"version":3,"file":"parseBookRow.test.js","sourceRoot":"","sources":["../../../../sources/goodreads/__tests__/parseBookRow.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2BAAkC;AAClC,+BAA4B;AAC5B,iDAAmC;AACnC,kCAAuC;AAEvC,SAAS,UAAU,CAAC,IAAY;IAC9B,MAAM,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,MAAM,IAAI,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC;AACrB,CAAC;AAED,SAAS,qBAAqB;IAC5B,MAAM,IAAI,GAAG,IAAA,iBAAY,EACvB,IAAA,WAAI,EAAC,SAAS,EAAE,+CAA+C,CAAC,EAChE,MAAM,CACP,CAAC;IACF,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,qBAAqB,EAAE,CAAC;QAC5C,MAAM,MAAM,GAAG,IAAA,mBAAY,EAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAErC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,KAAK,EAAE,6CAA6C;YACpD,MAAM,EAAE,oBAAoB;YAC5B,YAAY,EAAE,8DAA8D;YAC5E,UAAU,EACR,iGAAiG;YACnG,YAAY,EAAE,EAAE;YAChB,UAAU,EAAE,IAAI;YAChB,UAAU,EAAE,aAAa;SAC1B,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAChC,MAAM,IAAI,GAAG;;;;;;;;;;;;;KAaZ,CAAC;QACF,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,IAAA,mBAAY,EAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAErC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;YACrB,KAAK,EAAE,WAAW;YAClB,MAAM,EAAE,gBAAgB;YACxB,YAAY,EAAE,yCAAyC;YACvD,UAAU,EAAE,EAAE;YACd,YAAY,EAAE,EAAE;YAChB,UAAU,EAAE,IAAI;YAChB,UAAU,EAAE,EAAE;SACf,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { readFileSync } from 'fs';\nimport { join } from 'path';\nimport * as cheerio from 'cheerio';\nimport { parseBookRow } from '../data';\n\nfunction getElement(html: string) {\n  const $ = cheerio.load(html);\n  const elem = $('tr.review').first().get(0);\n  if (!elem) {\n    throw new Error('No review element found');\n  }\n  return { $, elem };\n}\n\nfunction getBookRowFromFixture() {\n  const html = readFileSync(\n    join(__dirname, '__fixtures__/responses/currently_reading.html'),\n    'utf8'\n  );\n  return getElement(html);\n}\n\ndescribe('parseBookRow', () => {\n  it('parses a complete book row', () => {\n    const { $, elem } = getBookRowFromFixture();\n    const result = parseBookRow($, elem);\n\n    expect(result).toEqual({\n      title: 'Wind and Truth (The Stormlight Archive, #5)',\n      author: 'Sanderson, Brandon',\n      canonicalURL: 'https://www.goodreads.com/book/show/203578847-wind-and-truth',\n      coverImage:\n        'https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1724944713l/203578847.jpg',\n      primaryColor: '',\n      userRating: null,\n      userReview: 'review None',\n    });\n  });\n\n  it('handles missing fields', () => {\n    const html = `\n      <tr class=\"review\">\n        <td class=\"field title\">\n          <div class=\"value\">\n            <a href=\"/book/show/123\">Test Book</a>\n          </div>\n        </td>\n        <td class=\"field author\">\n          <div class=\"value\">\n            <a href=\"/author/show/123\">Unknown Author</a>\n          </div>\n        </td>\n      </tr>\n    `;\n    const { $, elem } = getElement(html);\n    const result = parseBookRow($, elem);\n\n    expect(result).toEqual({\n      title: 'Test Book',\n      author: 'Unknown Author',\n      canonicalURL: 'https://www.goodreads.com/book/show/123',\n      coverImage: '',\n      primaryColor: '',\n      userRating: null,\n      userReview: '',\n    });\n  });\n});\n"]}