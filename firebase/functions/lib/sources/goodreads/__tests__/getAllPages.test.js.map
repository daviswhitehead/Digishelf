{"version":3,"file":"getAllPages.test.js","sourceRoot":"","sources":["../../../../sources/goodreads/__tests__/getAllPages.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { getAllPages } from '../data';\nimport axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport { loadFixture } from './__fixtures__/loadFixture';\n\ndescribe('getAllPages', () => {\n  let mock: MockAdapter;\n\n  beforeEach(() => {\n    mock = new MockAdapter(axios);\n    jest.spyOn(console, 'warn').mockImplementation(() => {});\n    jest.spyOn(console, 'error').mockImplementation(() => {});\n    jest.spyOn(console, 'info').mockImplementation(() => {});\n  });\n\n  afterEach(() => {\n    mock.reset();\n    jest.clearAllMocks();\n  });\n\n  it('successfully fetches a single page shelf', async () => {\n    const mockHTML = loadFixture('responses/currently_reading.html');\n    const baseURL = 'https://www.goodreads.com/review/list/123';\n    mock.onGet(`${baseURL}&page=1`).reply(200, mockHTML);\n\n    const result = await getAllPages(baseURL);\n\n    expect(result).toBeDefined();\n    expect(result?.length).toBe(7); // Currently reading shelf has 7 books\n    expect(result?.[0]).toMatchObject({\n      title: 'Wind and Truth (The Stormlight Archive, #5)',\n      author: 'Sanderson, Brandon',\n    });\n  });\n\n  it('handles empty shelf response', async () => {\n    const mockHTML = loadFixture('responses/test_shelf.html');\n    const baseURL = 'https://www.goodreads.com/review/list/123';\n    mock.onGet(`${baseURL}&page=1`).reply(200, mockHTML);\n\n    const result = await getAllPages(baseURL);\n\n    expect(result).toBeDefined();\n    expect(result).toEqual([]);\n    expect(console.info).toHaveBeenCalledWith('Found 0 books on page 1');\n  });\n\n  it('handles network errors gracefully', async () => {\n    const baseURL = 'https://www.goodreads.com/review/list/123';\n    mock.onGet(`${baseURL}&page=1`).networkError();\n\n    const result = await getAllPages(baseURL);\n    expect(result).toBeNull();\n    expect(console.error).toHaveBeenCalled();\n  });\n\n  it('handles rate limiting', async () => {\n    const baseURL = 'https://www.goodreads.com/review/list/123';\n    mock.onGet(`${baseURL}&page=1`).reply(429);\n\n    const result = await getAllPages(baseURL);\n    expect(result).toBeNull();\n    expect(console.error).toHaveBeenCalledWith(\n      'Failed to fetch page 1:',\n      expect.stringContaining('429')\n    );\n  });\n});\n"]}