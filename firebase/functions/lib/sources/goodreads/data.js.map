{"version":3,"file":"data.js","sourceRoot":"","sources":["../../../sources/goodreads/data.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,8CAcC;AAKD,oCA+BC;AAUD,oCA6CC;AAKD,kCAyDC;AApLD,+CAA0C;AAC1C,iDAAmC;AAEnC,sDAAuD;AACvD,oDAAiD;AAEjD,mCAAwE;AACxE,sDAA6B;AAC7B,2CAA0C;AAE1C;;GAEG;AACH,SAAgB,iBAAiB,CAAC,CAAqB,EAAE,IAAa;IACpE,4DAA4D;IAC5D,MAAM,eAAe,GAAG,CAAC,4BAA4B,EAAE,sBAAsB,EAAE,eAAe,CAAC,CAAC;IAEhG,KAAK,MAAM,QAAQ,IAAI,eAAe,EAAE,CAAC;QACvC,MAAM,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;QACxD,IAAI,UAAU,EAAE,CAAC;YACf,6EAA6E;YAC7E,OAAO,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;QAChD,CAAC;IACH,CAAC;IAED,mFAAmF;IACnF,OAAO,EAAE,CAAC;AACZ,CAAC;AAED;;GAEG;AACH,SAAgB,YAAY,CAAC,CAAqB,EAAE,IAAa;IAC/D,cAAc;IACd,IAAI,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;IACtE,IAAI,UAAU,EAAE,CAAC;QACf,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,gBAAgB;IAChB,MAAM,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACnD,MAAM,KAAK,GAAG,IAAA,qBAAa,EAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;IACrD,IAAI,YAAY,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IAChD,IAAI,YAAY,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;QACrD,YAAY,GAAG,2BAA2B,GAAG,YAAY,CAAC;IAC5D,CAAC;IAED,SAAS;IACT,MAAM,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;IAEvE,oBAAoB;IACpB,MAAM,MAAM,GAAG,IAAA,uBAAe,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/F,MAAM,UAAU,GAAG,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IAE9C,OAAO;QACL,KAAK;QACL,MAAM;QACN,UAAU;QACV,YAAY;QACZ,UAAU,EAAE,MAAM;QAClB,UAAU;QACV,YAAY,EAAE,EAAE;KACjB,CAAC;AACJ,CAAC;AAOD;;GAEG;AACI,KAAK,UAAU,YAAY,CAAC,OAAe,EAAE,UAAkB;IACpE,OAAO,IAAA,mBAAU,EAAC,qBAAqB,UAAU,EAAE,EAAE,KAAK,IAAI,EAAE;;QAC9D,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,OAAO,GAAG,SAAS,UAAU,EAAE,CAAC;YAEhD,8BAA8B;YAC9B,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,IAAA,aAAK,EAAC,GAAG,EAAE,CAAC,eAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;gBAC3D,OAAO,EAAE,CAAC;gBACV,UAAU,EAAE,IAAI;gBAChB,MAAM,EAAE,CAAC;gBACT,OAAO,EAAE,CAAC,KAAY,EAAE,EAAE;oBACxB,OAAO,CAAC,IAAI,CACV,iBAAiB,UAAU,eAAe,EAC1C,KAAK,YAAY,kBAAU,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAC9D,CAAC;gBACJ,CAAC;aACF,CAAC,CAAC;YAEH,yBAAyB;YACzB,MAAM,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAuB,CAAC;YAEnD,MAAM,QAAQ,GAAG,CAAC,CAAC,qBAAqB,CAAC,CAAC,OAAO,EAAE,CAAC;YAEpD,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;gBACrB,OAAO,CAAC,IAAI,CAAC,0BAA0B,UAAU,EAAE,CAAC,CAAC;YACvD,CAAC;YAED,MAAM,KAAK,GAAG,IAAA,iBAAM,EAAC,uBAAW,CAAC,aAAa,CAAC,CAAC;YAChD,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,GAAG,CAC7B,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC,YAAY,CAAC,CAAC,EAAE,IAAe,CAAC,CAAC,CAAC,CAC1E,CAAC;YAEF,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QACtB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,YAAY,GAChB,KAAK,YAAY,kBAAU;gBACzB,CAAC,CAAC,QAAQ,MAAA,KAAK,CAAC,QAAQ,0CAAE,MAAM,KAAK,KAAK,CAAC,OAAO,EAAE;gBACpD,CAAC,CAAC,KAAK,YAAY,KAAK;oBACtB,CAAC,CAAC,KAAK,CAAC,OAAO;oBACf,CAAC,CAAC,eAAe,CAAC;YAExB,OAAO,CAAC,KAAK,CAAC,wBAAwB,UAAU,GAAG,EAAE,YAAY,CAAC,CAAC;YACnE,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;GAEG;AACI,KAAK,UAAU,WAAW,CAAC,WAAmB;IACnD,OAAO,IAAA,mBAAU,EAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QAC1C,IAAI,CAAC;YACH,sCAAsC;YACtC,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,EAAE,GAAG,MAAM,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACtE,OAAO,CAAC,IAAI,CAAC,SAAS,YAAY,CAAC,MAAM,kBAAkB,CAAC,CAAC;YAE7D,MAAM,UAAU,GAAG,IAAA,qBAAa,EAAC,CAAC,CAAC,CAAC;YACpC,OAAO,CAAC,IAAI,CAAC,2BAA2B,UAAU,EAAE,CAAC,CAAC;YACtD,IAAI,QAAQ,GAAG,CAAC,GAAG,YAAY,CAAC,CAAC;YAEjC,IAAI,UAAU,GAAG,CAAC,EAAE,CAAC;gBACnB,MAAM,KAAK,GAAG,IAAA,iBAAM,EAAC,uBAAW,CAAC,aAAa,CAAC,CAAC;gBAChD,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,UAAU,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACnE,KAAK,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAC9C,CAAC;gBAEF,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;gBACvD,IAAI,YAAY,GAAG,CAAC,CAAC,CAAC,8BAA8B;gBACpD,IAAI,YAAY,GAAG,CAAC,CAAC;gBAErB,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;oBAChC,IAAI,MAAM,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;wBAClC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC;wBAC/B,OAAO,CAAC,IAAI,CAAC,SAAS,KAAK,CAAC,MAAM,kBAAkB,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;wBACjE,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;wBAClC,YAAY,EAAE,CAAC;oBACjB,CAAC;yBAAM,CAAC;wBACN,OAAO,CAAC,KAAK,CACX,wBAAwB,KAAK,GAAG,CAAC,KAAK,WAAW,SAAS,KAAK,GAAG,CAAC,IAAI,EACvE,MAAM,CAAC,MAAM,YAAY,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CACzE,CAAC;wBACF,YAAY,EAAE,CAAC;oBACjB,CAAC;gBACH,CAAC,CAAC,CAAC;gBAEH,OAAO,CAAC,IAAI,CAAC,wBAAwB,YAAY,IAAI,UAAU,qBAAqB,CAAC,CAAC;gBACtF,IAAI,YAAY,GAAG,CAAC,EAAE,CAAC;oBACrB,OAAO,CAAC,IAAI,CAAC,qBAAqB,YAAY,QAAQ,CAAC,CAAC;gBAC1D,CAAC;YACH,CAAC;YAED,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;gBACrB,OAAO,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;gBACxC,OAAO,IAAI,CAAC;YACd,CAAC;YAED,OAAO,CAAC,IAAI,CAAC,0BAA0B,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1D,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CACX,6BAA6B,EAC7B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CACzD,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC,CAAoC,CAAC,CAAC,oCAAoC;AAC7E,CAAC","sourcesContent":["import axios, { AxiosError } from 'axios';\nimport * as cheerio from 'cheerio';\nimport type { Element } from 'domhandler';\nimport { withTiming } from '../../shared/utils/timing';\nimport { retry } from '../../shared/utils/retry';\nimport { GoodreadsBook } from './types';\nimport { translateRating, cleanNewLines, getTotalPages } from './utils';\nimport pLimit from 'p-limit';\nimport { CONCURRENCY } from './constants';\n\n/**\n * Extracts review text from a Goodreads review element using multiple possible selectors\n */\nexport function extractReviewText($: cheerio.CheerioAPI, elem: Element): string {\n  // Try to find the review text in various possible locations\n  const reviewSelectors = ['span[id^=\"freeTextreview\"]', 'span[id^=\"freeText\"]', '.field.review'];\n\n  for (const selector of reviewSelectors) {\n    const reviewText = $(elem).find(selector).text().trim();\n    if (reviewText) {\n      // Normalize whitespace: replace multiple spaces/newlines with a single space\n      return reviewText.replace(/\\s+/g, ' ').trim();\n    }\n  }\n\n  // If no review text is found in any of the expected locations, return empty string\n  return '';\n}\n\n/**\n * Parses a single book row from Goodreads HTML\n */\nexport function parseBookRow($: cheerio.CheerioAPI, elem: Element): GoodreadsBook {\n  // Cover Image\n  let coverImage = $(elem).find('td.field.cover img').attr('src') || '';\n  if (coverImage) {\n    coverImage = coverImage.replace(/\\._S[XY]\\d+_/, '');\n  }\n\n  // Title and URL\n  const titleLink = $(elem).find('td.field.title a');\n  const title = cleanNewLines(titleLink.text().trim());\n  let canonicalURL = titleLink.attr('href') || '';\n  if (canonicalURL && !canonicalURL.startsWith('http')) {\n    canonicalURL = 'https://www.goodreads.com' + canonicalURL;\n  }\n\n  // Author\n  const author = $(elem).find('td.field.author a').first().text().trim();\n\n  // Rating and Review\n  const rating = translateRating($(elem).find('td.field.rating span.staticStars').attr('title'));\n  const userReview = extractReviewText($, elem);\n\n  return {\n    title,\n    author,\n    coverImage,\n    canonicalURL,\n    userRating: rating,\n    userReview,\n    primaryColor: '',\n  };\n}\n\ninterface PageData {\n  books: GoodreadsBook[];\n  $: cheerio.CheerioAPI;\n}\n\n/**\n * Scrapes a single Goodreads shelf page with retry logic\n */\nexport async function getPageItems(baseURL: string, pageNumber: number): Promise<PageData> {\n  return withTiming(`getPageItems-page-${pageNumber}`, async () => {\n    try {\n      const pageURL = baseURL + `&page=${pageNumber}`;\n\n      // Fetch HTML with retry logic\n      const { data: html } = await retry(() => axios.get(pageURL), {\n        retries: 3,\n        minTimeout: 1000,\n        factor: 2,\n        onRetry: (error: Error) => {\n          console.warn(\n            `Retrying page ${pageNumber} after error:`,\n            error instanceof AxiosError ? error.message : 'Unknown error'\n          );\n        },\n      });\n\n      // Load HTML with cheerio\n      const $ = cheerio.load(html) as cheerio.CheerioAPI;\n\n      const bookRows = $('tr.bookalike.review').toArray();\n\n      if (!bookRows.length) {\n        console.warn(`No books found on page ${pageNumber}`);\n      }\n\n      const limit = pLimit(CONCURRENCY.PAGE_REQUESTS);\n      const books = await Promise.all(\n        bookRows.map(elem => limit(async () => parseBookRow($, elem as Element)))\n      );\n\n      return { books, $ };\n    } catch (error) {\n      const errorMessage =\n        error instanceof AxiosError\n          ? `HTTP ${error.response?.status}: ${error.message}`\n          : error instanceof Error\n            ? error.message\n            : 'Unknown error';\n\n      console.error(`Failed to fetch page ${pageNumber}:`, errorMessage);\n      throw error;\n    }\n  });\n}\n\n/**\n * Gets all pages of a Goodreads shelf with parallel processing and error handling\n */\nexport async function getAllPages(originalURL: string): Promise<GoodreadsBook[] | null> {\n  return withTiming('getAllPages', async () => {\n    try {\n      // Fetch first page to get total pages\n      const { books: booksOnPage1, $ } = await getPageItems(originalURL, 1);\n      console.info(`Found ${booksOnPage1.length} books on page 1`);\n\n      const totalPages = getTotalPages($);\n      console.info(`Total pages to process: ${totalPages}`);\n      let allBooks = [...booksOnPage1];\n\n      if (totalPages > 1) {\n        const limit = pLimit(CONCURRENCY.PAGE_REQUESTS);\n        const pagePromises = Array.from({ length: totalPages - 1 }, (_, i) =>\n          limit(() => getPageItems(originalURL, i + 2))\n        );\n\n        const results = await Promise.allSettled(pagePromises);\n        let successCount = 1; // Count first page as success\n        let failureCount = 0;\n\n        results.forEach((result, index) => {\n          if (result.status === 'fulfilled') {\n            const { books } = result.value;\n            console.info(`Found ${books.length} books on page ${index + 2}`);\n            allBooks = allBooks.concat(books);\n            successCount++;\n          } else {\n            console.error(\n              `Failed to fetch page ${index + 2} (${originalURL}&page=${index + 2}):`,\n              result.reason instanceof Error ? result.reason.message : 'Unknown error'\n            );\n            failureCount++;\n          }\n        });\n\n        console.info(`Completed processing ${successCount}/${totalPages} pages successfully`);\n        if (failureCount > 0) {\n          console.warn(`Failed to process ${failureCount} pages`);\n        }\n      }\n\n      if (!allBooks.length) {\n        console.warn('No books found in shelf');\n        return null;\n      }\n\n      console.info(`Total books collected: ${allBooks.length}`);\n      return allBooks;\n    } catch (error) {\n      console.error(\n        'Fatal error in getAllPages:',\n        error instanceof Error ? error.message : 'Unknown error'\n      );\n      return null;\n    }\n  }) as Promise<GoodreadsBook[] | null>; // Type assertion to fix return type\n}\n"]}