{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":";;;AAAA,+DAOyC;AACzC,4CAAmD;AACnD,wDAA6F;AAC7F,uDAAuF;AACvF,2DAIsC;AAEtC,wDAAwD;AAExD,IAAA,mBAAa,GAAE,CAAC;AAChB,MAAM,EAAE,GAAc,IAAA,wBAAY,GAAE,CAAC;AAKxB,QAAA,kBAAkB,GAAG,IAAA,6BAAiB,EACjD;IACE,QAAQ,EAAE,8BAA8B;IACxC,MAAM,EAAE,QAAQ;IAChB,cAAc,EAAE,EAAE;CACnB,EACD,KAAK,EAAE,KAAuB,EAAiB,EAAE;;IAC/C,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAEnC,MAAM,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC;IACjD,MAAM,KAAK,GAAG,MAAA,MAAA,KAAK,CAAC,IAAI,0CAAE,KAAK,0CAAE,IAAI,EAAsC,CAAC;IAE5E,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,CAAC,IAAI,CAAC,2CAA2C,aAAa,EAAE,CAAC,CAAC;QACzE,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,UAAU,GAAG,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;IAE3D,IAAI,UAAU,KAAK,WAAW,EAAE,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,wCAAwC,aAAa,EAAE,CAAC,CAAC;QAEtE,IAAI,CAAC;YACH,OAAO,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YACtC,MAAM,IAAA,gCAAqB,EAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YAClD,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;YACzC,OAAO,CAAC,IAAI,CAAC,gDAAgD,aAAa,EAAE,CAAC,CAAC;YAC9E,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;YACtC,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,8CAA8C,aAAa,EAAE,EAAE,GAAG,CAAC,CAAC;YAClF,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;YACtC,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CACF,CAAC;AAEW,QAAA,YAAY,GAAG,IAAA,6BAAiB,EAC3C;IACE,QAAQ,EAAE,mBAAmB;IAC7B,MAAM,EAAE,MAAM;IACd,cAAc,EAAE,GAAG;CACpB,EACD,KAAK,EAAE,KAAiB,EAAiB,EAAE;;IACzC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAE7B,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;IACrC,MAAM,KAAK,GAAG,MAAA,MAAA,KAAK,CAAC,IAAI,0CAAE,KAAK,0CAAE,IAAI,EAAgC,CAAC;IAEtE,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,CAAC,IAAI,CAAC,qCAAqC,OAAO,EAAE,CAAC,CAAC;QAC7D,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,UAAU,GAAG,CAAC,KAAK,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;IAEjE,IAAI,UAAU,KAAK,WAAW,EAAE,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,kCAAkC,OAAO,EAAE,CAAC,CAAC;QAE1D,IAAI,CAAC;YACH,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACpC,MAAM,IAAA,8BAAmB,EAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC1C,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;YACvC,OAAO,CAAC,IAAI,CAAC,0CAA0C,OAAO,EAAE,CAAC,CAAC;YAClE,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAChC,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,wCAAwC,OAAO,EAAE,EAAE,GAAG,CAAC,CAAC;YACtE,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAChC,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CACF,CAAC;AAEW,QAAA,mBAAmB,GAAG,IAAA,6BAAiB,EAClD;IACE,QAAQ,EAAE,8BAA8B;IACxC,MAAM,EAAE,QAAQ;IAChB,cAAc,EAAE,EAAE;CACgC,EACpD,KAAK,EAAE,KAAwD,EAAiB,EAAE;IAChF,MAAM,EAAE,aAAa,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;IAEvC,IAAI,CAAC;QACH,iEAAiE;QACjE,MAAM,YAAY,GAAG,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAC1F,MAAM,UAAU,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,eAAe,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAEtF,MAAM,OAAO,CAAC,GAAG,CAAC;YAChB,IAAA,wBAAY,EACV,YAAY,EACZ,CAAC,KAAiB,EAAE,GAA0B,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EACxE,kBAAkB,CACnB;YACD,IAAA,wBAAY,EACV,UAAU,EACV,CAAC,KAAiB,EAAE,GAA0B,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EACxE,gBAAgB,CACjB;SACF,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,+DAA+D,aAAa,EAAE,CAAC,CAAC;IAC9F,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,qDAAqD,aAAa,EAAE,EAAE,KAAK,CAAC,CAAC;IAC7F,CAAC;AACH,CAAC,CACF,CAAC;AAgBF,MAAM,mBAAmB,GAAoB;IAC3C,cAAc,EAAE,GAAG;IACnB,MAAM,EAAE,MAAM;IACd,MAAM,EAAE,aAAa;CACtB,CAAC;AAEW,QAAA,YAAY,GAAG,IAAA,cAAM,EAChC,mBAAmB,EACnB,KAAK,EAAE,OAA0C,EAAiC,EAAE;IAClF,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAC1B,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;IAE7B,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO;YACL,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,sBAAsB;SAChC,CAAC;IACJ,CAAC;IAED,IAAI,CAAC;QACH,OAAO,CAAC,IAAI,CAAC,4CAA4C,OAAO,EAAE,CAAC,CAAC;QACpE,MAAM,IAAA,gCAAqB,EAAC,OAAO,CAAC,CAAC;QACrC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,+BAA+B,EAAE,CAAC;IACrE,CAAC;IAAC,OAAO,KAAc,EAAE,CAAC;QACxB,OAAO,CAAC,KAAK,CAAC,6BAA6B,OAAO,EAAE,EAAE,KAAK,CAAC,CAAC;QAC7D,MAAM,GAAG,GAAG,KAAkC,CAAC;QAC/C,OAAO;YACL,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,GAAG,CAAC,OAAO,IAAI,yBAAyB;YACjD,KAAK,EAAE;gBACL,IAAI,EAAE,GAAG,CAAC,IAAI;gBACd,OAAO,EAAE,GAAG,CAAC,OAAO;gBACpB,KAAK,EAAE,GAAG,CAAC,KAAK;aACjB;SACF,CAAC;IACJ,CAAC;AACH,CAAC,CACF,CAAC;AACF,CAAC,CAAC","sourcesContent":["import {\n  onDocumentWritten,\n  onDocumentDeleted,\n  Change,\n  FirestoreEvent,\n  QueryDocumentSnapshot,\n  DocumentOptions,\n} from 'firebase-functions/v2/firestore';\nimport { initializeApp } from 'firebase-admin/app';\nimport { getFirestore, Firestore, DocumentData, WriteBatch } from 'firebase-admin/firestore';\nimport { onCall, CallableRequest, CallableOptions } from 'firebase-functions/v2/https';\nimport {\n  writeGoodreadsShelves,\n  writeGoodreadsItems,\n  refreshGoodreadsShelf,\n} from './sources/goodreads/handlers';\nimport { GoodreadsIntegration, GoodreadsShelf } from './shared/types';\nimport { processBatch } from './shared/utils/firestore';\n\ninitializeApp();\nconst db: Firestore = getFirestore();\n\ntype IntegrationEvent = FirestoreEvent<Change<DocumentData> | undefined>;\ntype ShelfEvent = FirestoreEvent<Change<DocumentData> | undefined>;\n\nexport const onIntegrationWrite = onDocumentWritten(\n  {\n    document: 'integrations/{integrationId}',\n    memory: '512MiB',\n    timeoutSeconds: 60,\n  },\n  async (event: IntegrationEvent): Promise<null> => {\n    console.time('onIntegrationWrite');\n\n    const integrationId = event.params.integrationId;\n    const after = event.data?.after?.data() as GoodreadsIntegration | undefined;\n\n    if (!after) {\n      console.info(`üóëÔ∏è Integration was deleted ‚Äî skipping: ${integrationId}`);\n      return null;\n    }\n\n    const sourceName = (after.displayName || '').toLowerCase();\n\n    if (sourceName === 'goodreads') {\n      console.info(`üì• Processing Goodreads integration: ${integrationId}`);\n\n      try {\n        console.time('writeGoodreadsShelves');\n        await writeGoodreadsShelves(integrationId, after);\n        console.timeEnd('writeGoodreadsShelves');\n        console.info(`‚úÖ Finished processing Goodreads integration: ${integrationId}`);\n        console.timeEnd('onIntegrationWrite');\n        return null;\n      } catch (err) {\n        console.error(`üêõ Error processing Goodreads integration: ${integrationId}`, err);\n        console.timeEnd('onIntegrationWrite');\n        return null;\n      }\n    }\n    return null;\n  }\n);\n\nexport const onShelfWrite = onDocumentWritten(\n  {\n    document: 'shelves/{shelfId}',\n    memory: '1GiB',\n    timeoutSeconds: 180,\n  },\n  async (event: ShelfEvent): Promise<null> => {\n    console.time('onShelfWrite');\n\n    const shelfId = event.params.shelfId;\n    const after = event.data?.after?.data() as GoodreadsShelf | undefined;\n\n    if (!after) {\n      console.info(`üóëÔ∏è Shelf was deleted ‚Äî skipping: ${shelfId}`);\n      return null;\n    }\n\n    const sourceName = (after.sourceDisplayName || '').toLowerCase();\n\n    if (sourceName === 'goodreads') {\n      console.info(`üì• Processing Goodreads shelf: ${shelfId}`);\n\n      try {\n        console.time('writeGoodreadsItems');\n        await writeGoodreadsItems(shelfId, after);\n        console.timeEnd('writeGoodreadsItems');\n        console.info(`‚úÖ Finished processing Goodreads shelf: ${shelfId}`);\n        console.timeEnd('onShelfWrite');\n        return null;\n      } catch (err) {\n        console.error(`üêõ Error processing Goodreads shelf: ${shelfId}`, err);\n        console.timeEnd('onShelfWrite');\n        return null;\n      }\n    }\n    return null;\n  }\n);\n\nexport const onIntegrationDelete = onDocumentDeleted(\n  {\n    document: 'integrations/{integrationId}',\n    memory: '512MiB',\n    timeoutSeconds: 60,\n  } as DocumentOptions<'integrations/{integrationId}'>,\n  async (event: FirestoreEvent<QueryDocumentSnapshot | undefined>): Promise<void> => {\n    const { integrationId } = event.params;\n\n    try {\n      // Delete all shelves and items associated with the integrationId\n      const shelvesQuery = db.collection('shelves').where('integrationId', '==', integrationId);\n      const itemsQuery = db.collection('items').where('integrationId', '==', integrationId);\n\n      await Promise.all([\n        processBatch(\n          shelvesQuery,\n          (batch: WriteBatch, doc: QueryDocumentSnapshot) => batch.delete(doc.ref),\n          'Deleting shelves'\n        ),\n        processBatch(\n          itemsQuery,\n          (batch: WriteBatch, doc: QueryDocumentSnapshot) => batch.delete(doc.ref),\n          'Deleting items'\n        ),\n      ]);\n\n      console.log(`Successfully deleted all associated data for integrationId: ${integrationId}`);\n    } catch (error) {\n      console.error(`Error deleting associated data for integrationId: ${integrationId}`, error);\n    }\n  }\n);\n\ninterface RefreshShelfData {\n  shelfId: string;\n}\n\ninterface RefreshShelfResponse {\n  success: boolean;\n  message: string;\n  error?: {\n    code?: string;\n    message: string;\n    stack?: string;\n  };\n}\n\nconst refreshShelfOptions: CallableOptions = {\n  timeoutSeconds: 540,\n  memory: '1GiB',\n  region: 'us-central1',\n};\n\nexport const refreshShelf = onCall(\n  refreshShelfOptions,\n  async (request: CallableRequest<RefreshShelfData>): Promise<RefreshShelfResponse> => {\n    const data = request.data;\n    const shelfId = data.shelfId;\n\n    if (!shelfId) {\n      return {\n        success: false,\n        message: 'Shelf ID is required',\n      };\n    }\n\n    try {\n      console.info(`üîÑ Refresh request received for shelfId: ${shelfId}`);\n      await refreshGoodreadsShelf(shelfId);\n      return { success: true, message: 'Shelf refreshed successfully.' };\n    } catch (error: unknown) {\n      console.error(`‚ùå Error refreshing shelf: ${shelfId}`, error);\n      const err = error as Error & { code?: string };\n      return {\n        success: false,\n        message: err.message || 'Failed to refresh shelf',\n        error: {\n          code: err.code,\n          message: err.message,\n          stack: err.stack,\n        },\n      };\n    }\n  }\n);\n1;\n"]}