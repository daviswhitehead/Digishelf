{"version":3,"file":"generateGoodreadsFixtures.test.js","sourceRoot":"","sources":["../../../scripts/__tests__/generateGoodreadsFixtures.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { sanitizeResponse, addMetadata } from '../generateGoodreadsFixtures';\n\n// Import the ShelfId type and SHELF_IDS constant\nimport { SHELF_IDS } from '../generateGoodreadsFixtures';\ntype ShelfId = (typeof SHELF_IDS)[keyof typeof SHELF_IDS];\n\ndescribe('sanitizeResponse', () => {\n  it('removes sensitive information from HTML', () => {\n    const html = `\n      <div>\n        <a href=\"/user/show/61851004\">Davis Whitehead</a>\n        <span>user-67890</span>\n        <form>\n          <input type=\"hidden\" name=\"email\" value=\"test@example.com\">\n          <input type=\"hidden\" name=\"auth_token\" value=\"abc123xyz\">\n        </form>\n        <script>\n          ga('send', 'pageview');\n          sensitive_data = 'should_be_removed';\n        </script>\n        <span>Created at 2024-03-15T14:30:45</span>\n        <a href=\"https://www.goodreads.com/review/list/61851004-davis-whitehead?shelf=read\">My Read Shelf</a>\n      </div>\n    `;\n\n    const sanitized = sanitizeResponse(html);\n\n    // Check that sensitive data is removed/replaced\n    expect(sanitized).not.toContain('61851004');\n    expect(sanitized).not.toContain('67890');\n    expect(sanitized).not.toContain('test@example.com');\n    expect(sanitized).not.toContain('abc123xyz');\n    expect(sanitized).not.toContain('ga(');\n    expect(sanitized).not.toContain('sensitive_data');\n    expect(sanitized).not.toContain('2024-03-15T14:30:45');\n\n    // Check that replacements are correct\n    expect(sanitized).toContain('user-xxx');\n    expect(sanitized).toContain('email=xxx@xxx.com');\n    expect(sanitized).toContain('auth_token=xxx');\n    expect(sanitized).toContain('2024-01-01T00:00:00');\n  });\n\n  it('preserves important HTML structure', () => {\n    const html = `\n      <div class=\"bookalike review\">\n        <div class=\"field title\">\n          <a href=\"/book/show/123\">Book Title</a>\n        </div>\n        <div class=\"field rating\">\n          <span class=\"staticStars\">5 stars</span>\n        </div>\n        <div class=\"field review\">\n          <span id=\"freeTextreview123\">Review text</span>\n        </div>\n      </div>\n    `;\n\n    const sanitized = sanitizeResponse(html);\n\n    // Check that important structure is preserved\n    expect(sanitized).toContain('<div class=\"bookalike review\">');\n    expect(sanitized).toContain('<div class=\"field title\">');\n    expect(sanitized).toContain('<div class=\"field rating\">');\n    expect(sanitized).toContain('<div class=\"field review\">');\n    expect(sanitized).toContain('Review text');\n  });\n});\n\ndescribe('addMetadata', () => {\n  it('adds metadata as HTML comments', () => {\n    const html = '<div>Test content</div>';\n    const metadata = {\n      generated: '2024-03-15T12:00:00Z',\n      source: 'Goodreads API',\n      purpose: 'Test fixture',\n      shelfId: SHELF_IDS.CURRENTLY_READING as ShelfId,\n      page: 1,\n    };\n\n    const withMetadata = addMetadata(html, metadata);\n\n    // Check that metadata is added as comments\n    expect(withMetadata).toContain('<!--');\n    expect(withMetadata).toContain('-->');\n    expect(withMetadata).toContain('Generated: 2024-03-15T12:00:00Z');\n    expect(withMetadata).toContain('Source: Goodreads API');\n    expect(withMetadata).toContain('Purpose: Test fixture');\n    expect(withMetadata).toContain('Shelf ID: currently-reading');\n    expect(withMetadata).toContain('Page: 1');\n\n    // Check that original content is preserved\n    expect(withMetadata).toContain('<div>Test content</div>');\n  });\n\n  it('handles metadata without page number', () => {\n    const html = '<div>Test content</div>';\n    const metadata = {\n      generated: '2024-03-15T12:00:00Z',\n      source: 'Goodreads API',\n      purpose: 'Test fixture',\n      shelfId: SHELF_IDS.READ as ShelfId,\n    };\n\n    const withMetadata = addMetadata(html, metadata);\n\n    // Check that metadata is added without page number\n    expect(withMetadata).not.toContain('Page:');\n    expect(withMetadata).toContain('Shelf ID: read');\n  });\n});\n"]}