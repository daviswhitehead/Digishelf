{"version":3,"file":"generateGoodreadsFixtures.js","sourceRoot":"","sources":["../../scripts/generateGoodreadsFixtures.ts"],"names":[],"mappings":"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","sourcesContent":["import axios, { AxiosError } from 'axios';\nimport { writeFileSync, mkdirSync } from 'fs';\nimport { join } from 'path';\n\nexport const SHELF_IDS = {\n  // Main shelves\n  CURRENTLY_READING: 'currently-reading',\n  READ: 'read',\n  // Test shelf\n  TEST: 'digishelf-test',\n} as const;\n\ntype ShelfId = (typeof SHELF_IDS)[keyof typeof SHELF_IDS];\n\ninterface FixtureMetadata {\n  generated: string;\n  source: string;\n  purpose: string;\n  shelfId: ShelfId;\n  page?: number;\n}\n\n/**\n * Sanitizes HTML response to remove sensitive data\n */\nfunction sanitizeResponse(html: string): string {\n  return (\n    html\n      // Remove user IDs\n      .replace(/user-\\d+/g, 'user-xxx')\n      // Remove emails\n      .replace(/email=([^&\"]+)/g, 'email=xxx@xxx.com')\n      // Remove authentication tokens\n      .replace(/auth_token=([^&\"]+)/g, 'auth_token=xxx')\n      // Remove any script tags and their contents\n      .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n      // Remove Google Analytics\n      .replace(/ga\\('.*?'\\);/g, '')\n      // Remove user profile links\n      .replace(/href=\"\\/user\\/show\\/\\d+/g, 'href=\"/user/show/xxx')\n      // Remove timestamps\n      .replace(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/g, '2024-01-01T00:00:00')\n  );\n}\n\n/**\n * Adds metadata as HTML comments to the fixture\n */\nfunction addMetadata(html: string, metadata: FixtureMetadata): string {\n  const comment = `<!--\n  Generated: ${metadata.generated}\n  Source: ${metadata.source}\n  Purpose: ${metadata.purpose}\n  Shelf ID: ${metadata.shelfId}${metadata.page ? `\\n  Page: ${metadata.page}` : ''}\n-->`;\n  return `${comment}\\n${html}`;\n}\n\n/**\n * Fetches a shelf page from Goodreads\n */\nasync function fetchShelfPage(shelfId: ShelfId, page: number = 1): Promise<string> {\n  const url = `https://www.goodreads.com/review/list/61851004-davis-whitehead?shelf=${shelfId}${page > 1 ? `&page=${page}` : ''}`;\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (compatible; TestFixtureBot/1.0)',\n      },\n      timeout: 10000,\n    });\n    return response.data;\n  } catch (error) {\n    if (error instanceof AxiosError) {\n      // Capture the error response for error case fixtures\n      return error.response?.data || `<html><body><h1>Error: ${error.message}</h1></body></html>`;\n    }\n    throw error;\n  }\n}\n\n/**\n * Saves a fixture to disk with metadata and sanitization\n */\nasync function saveFixture(\n  content: string,\n  filename: string,\n  metadata: FixtureMetadata,\n  fixturesDir: string\n): Promise<void> {\n  const sanitized = sanitizeResponse(content);\n  const withMetadata = addMetadata(sanitized, metadata);\n  writeFileSync(join(fixturesDir, filename), withMetadata);\n  console.log(`âœ“ Generated ${filename}`);\n}\n\n/**\n * Generates all fixtures for testing\n */\nasync function generateFixtures() {\n  const fixturesDir = join(__dirname, '../sources/goodreads/__tests__/__fixtures__/responses');\n\n  // Ensure directories exist\n  mkdirSync(fixturesDir, { recursive: true });\n\n  const now = new Date().toISOString();\n\n  try {\n    // Success cases\n    const fixtures = [\n      {\n        name: 'currently_reading.html',\n        shelfId: SHELF_IDS.CURRENTLY_READING,\n        purpose: 'Test case for currently reading shelf',\n      },\n      {\n        name: 'read_shelf.html',\n        shelfId: SHELF_IDS.READ,\n        purpose: 'Test case for read shelf',\n      },\n      {\n        name: 'read_shelf_page_2.html',\n        shelfId: SHELF_IDS.READ,\n        page: 2,\n        purpose: 'Test case for subsequent pages of read shelf',\n      },\n      {\n        name: 'test_shelf.html',\n        shelfId: SHELF_IDS.TEST,\n        purpose: 'Test case for test shelf',\n      },\n    ];\n\n    // Generate success case fixtures\n    for (const fixture of fixtures) {\n      const response = await fetchShelfPage(fixture.shelfId, fixture.page);\n      await saveFixture(\n        response,\n        fixture.name,\n        {\n          generated: now,\n          source: 'Goodreads API',\n          purpose: fixture.purpose,\n          shelfId: fixture.shelfId,\n          page: fixture.page,\n        },\n        fixturesDir\n      );\n    }\n\n    // Generate error case fixtures\n    const errorCases = [\n      {\n        name: 'invalid_shelf.html',\n        shelfId: 'invalid-shelf' as ShelfId,\n        purpose: 'Test case for invalid shelf ID',\n      },\n      {\n        name: 'invalid_page.html',\n        shelfId: SHELF_IDS.READ,\n        page: 999,\n        purpose: 'Test case for invalid page number',\n      },\n    ];\n\n    for (const errorCase of errorCases) {\n      const response = await fetchShelfPage(errorCase.shelfId, errorCase.page);\n      await saveFixture(\n        response,\n        errorCase.name,\n        {\n          generated: now,\n          source: 'Goodreads API',\n          purpose: errorCase.purpose,\n          shelfId: errorCase.shelfId,\n          page: errorCase.page,\n        },\n        fixturesDir\n      );\n    }\n\n    console.log('\\nFixture generation completed successfully! ðŸŽ‰');\n  } catch (error) {\n    console.error('\\nError generating fixtures:', error);\n    process.exit(1);\n  }\n}\n\n// Only run if called directly\nif (require.main === module) {\n  generateFixtures();\n}\n\nexport { generateFixtures, sanitizeResponse, addMetadata };\n"]}