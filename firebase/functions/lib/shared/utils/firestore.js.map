{"version":3,"file":"firestore.js","sourceRoot":"","sources":["../../../shared/utils/firestore.ts"],"names":[],"mappings":";;AAEA,oCAiCC;AAnCD,wDAAkG;AAE3F,KAAK,UAAU,YAAY,CAChC,KAAY,EACZ,SAAkE,EAClE,WAAmB;IAEnB,MAAM,EAAE,GAAG,IAAA,wBAAY,GAAE,CAAC;IAC1B,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE,CAAC;IACnC,MAAM,SAAS,GAAG,GAAG,CAAC;IACtB,MAAM,OAAO,GAAiB,EAAE,CAAC;IACjC,IAAI,YAAY,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;IAC9B,IAAI,cAAc,GAAG,CAAC,CAAC;IAEvB,OAAO,CAAC,GAAG,CAAC,GAAG,WAAW,gBAAgB,QAAQ,CAAC,IAAI,YAAY,CAAC,CAAC;IAErE,KAAK,MAAM,GAAG,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;QAChC,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;QAC7B,cAAc,EAAE,CAAC;QAEjB,IAAI,cAAc,KAAK,SAAS,EAAE,CAAC;YACjC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC3B,YAAY,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;YAC1B,cAAc,GAAG,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;IAED,IAAI,cAAc,GAAG,CAAC,EAAE,CAAC;QACvB,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC7B,CAAC;IAED,OAAO,CAAC,GAAG,CAAC,GAAG,WAAW,gBAAgB,OAAO,CAAC,MAAM,UAAU,CAAC,CAAC;IAEpE,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACxD,OAAO,CAAC,GAAG,CAAC,GAAG,WAAW,0BAA0B,CAAC,CAAC;AACxD,CAAC","sourcesContent":["import { Query, WriteBatch, QueryDocumentSnapshot, getFirestore } from 'firebase-admin/firestore';\n\nexport async function processBatch(\n  query: Query,\n  processFn: (batch: WriteBatch, doc: QueryDocumentSnapshot) => void,\n  description: string\n): Promise<void> {\n  const db = getFirestore();\n  const snapshot = await query.get();\n  const batchSize = 500;\n  const batches: WriteBatch[] = [];\n  let currentBatch = db.batch();\n  let operationCount = 0;\n\n  console.log(`${description}: Processing ${snapshot.size} documents`);\n\n  for (const doc of snapshot.docs) {\n    processFn(currentBatch, doc);\n    operationCount++;\n\n    if (operationCount === batchSize) {\n      batches.push(currentBatch);\n      currentBatch = db.batch();\n      operationCount = 0;\n    }\n  }\n\n  if (operationCount > 0) {\n    batches.push(currentBatch);\n  }\n\n  console.log(`${description}: Committing ${batches.length} batches`);\n\n  await Promise.all(batches.map(batch => batch.commit()));\n  console.log(`${description}: Completed successfully`);\n}\n"]}