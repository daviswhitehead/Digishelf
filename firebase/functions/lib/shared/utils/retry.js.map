{"version":3,"file":"retry.js","sourceRoot":"","sources":["../../../shared/utils/retry.ts"],"names":[],"mappings":";;AAaA,sBAyBC;AA/BD;;;;;GAKG;AACI,KAAK,UAAU,KAAK,CACzB,SAA2B,EAC3B,EAAE,OAAO,GAAG,CAAC,EAAE,UAAU,GAAG,IAAI,EAAE,MAAM,GAAG,CAAC,EAAE,OAAO,GAAG,GAAG,EAAE,GAAE,CAAC,KAAmB,EAAE;IAErF,IAAI,SAAgB,CAAC;IACrB,IAAI,OAAO,GAAG,CAAC,CAAC;IAEhB,OAAO,OAAO,GAAG,OAAO,EAAE,CAAC;QACzB,IAAI,CAAC;YACH,OAAO,MAAM,SAAS,EAAE,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACtE,OAAO,EAAE,CAAC;YAEV,IAAI,OAAO,KAAK,OAAO,EAAE,CAAC;gBACxB,MAAM,IAAI,KAAK,CAAC,gBAAgB,OAAO,cAAc,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;YAC5E,CAAC;YAED,MAAM,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,GAAG,CAAC,CAAC,CAAC;YAC3D,OAAO,CAAC,SAAS,CAAC,CAAC;YACnB,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;QAC7D,CAAC;IACH,CAAC;IAED,MAAM,IAAI,KAAK,CAAC,gBAAgB,OAAO,cAAc,SAAU,CAAC,OAAO,EAAE,CAAC,CAAC;AAC7E,CAAC","sourcesContent":["interface RetryOptions {\n  retries?: number;\n  minTimeout?: number;\n  factor?: number;\n  onRetry?: (error: Error) => void;\n}\n\n/**\n * Retries an async operation with exponential backoff\n * @param operation The async operation to retry\n * @param options Retry options\n * @returns The result of the operation\n */\nexport async function retry<T>(\n  operation: () => Promise<T>,\n  { retries = 3, minTimeout = 1000, factor = 2, onRetry = () => {} }: RetryOptions = {}\n): Promise<T> {\n  let lastError: Error;\n  let attempt = 0;\n\n  while (attempt < retries) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error instanceof Error ? error : new Error(String(error));\n      attempt++;\n\n      if (attempt === retries) {\n        throw new Error(`Failed after ${retries} attempts: ${lastError.message}`);\n      }\n\n      const timeout = minTimeout * Math.pow(factor, attempt - 1);\n      onRetry(lastError);\n      await new Promise(resolve => setTimeout(resolve, timeout));\n    }\n  }\n\n  throw new Error(`Failed after ${retries} attempts: ${lastError!.message}`);\n}\n"]}